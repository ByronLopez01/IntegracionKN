services:
  apiwaverelease:
    volumes:
       - ../externalproperties/ExternalProperties.json:/app/externalproperties/ExternalProperties.json
    build:

      context: ..
      dockerfile: APIWaveRelease/Dockerfile
    image: apiwaverelease:latest
    ports:
      - "5000:8080"
    networks:
      - microservices-net
    #env_file:
     # - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped

  apilpnpicking:
    build:
      context: ..
      dockerfile: APILPNPicking/Dockerfile
    image: apilpnpicking:latest
    ports:
      - "5001:8080"
    networks:
      - microservices-net
    #env_file:
     # - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped

  apifamilymaster:
    build:
      context: ..
      dockerfile: APIFamilyMaster/Dockerfile
    image: apifamilymaster:latest
    ports:
      - "5002:8080" # Puerto externo 5002 mapeado al puerto interno 8080
    networks:
      - microservices-net
   #env_file:
    #  - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development


#test
      - ASPNETCORE_URLS=http://+:8080
####################################################
    restart: unless-stopped


  orderupdate:
    build:
      context: ..
      dockerfile: APIOrderUpdate/Dockerfile
    image: orderupdate:latest
    ports:
      - "5004:8080"
    networks:
      - microservices-net
    #env_file:
     # - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped

  apiorderconfirmation:
    build:
      context: ..
      dockerfile: APIOrderConfirmation/Dockerfile
    image: apiorderconfirmation:latest
    ports:
      - "5005:8080"
    networks:
      - microservices-net
    #env_file:
     # - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped


  apisenad:
    build:
      context: ..
      dockerfile: APISenad/Dockerfile
    image: apisenad:latest
    ports:
      - "5006:8080"
    networks:
      - microservices-net
    #env_file:
      #- .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped

  #proxy-xlog:
   # image: traefik:v2.7
    #container_name: proxy-xlog
    #ports:
     # - "8010:80"
      #- "4443:443"
    #volumes:
     # - /var/run/docker.sock:/var/run/docker.sock
     # - ./traefik.toml:/traefik.toml
      #- ./acme.json:/acme.json
    #networks:
    #  - web
    #labels:
     # - "traefik.enable=true"
     # - "traefik.http.routers.proxy-xlog.rule=Host('127.0.0.1')"
      #- "traefik.http.routers.proxy-xlog.tls=true"
      #- "traefik.http.routers.proxy-xlog.tls.certresolver=myresolver"
     # - "traefik.http.services.proxy-xlog.loadbalancer.server.url=http://otro_contenedor:puerto"

networks:
  microservices-net:
    driver: bridge
